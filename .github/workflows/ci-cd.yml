name: CI/CD Pipeline

on:  # Déclencheurs pour l'exécution du workflow
  push:
    branches: [ main ]  # Exécution sur push vers la branche main
  pull_request:
    branches: [ main ]  # Exécution sur PR vers main
  workflow_dispatch:    # Permet un lancement manuel via l'interface GitHub

jobs:
  test:
    runs-on: ubuntu-latest  # Utilisation de la dernière version d'Ubuntu pour l'exécution

    steps:
      - uses: actions/checkout@v4  # Récupère le code source depuis le repository GitHub
      
      - name: Setup Python 3.10
        uses: actions/setup-python@v4  # Configuration de Python 3.10
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          pip install --upgrade pip  # Met à jour pip pour éviter des erreurs liées à une ancienne version
          pip install -r requirements.txt  # Installe les dépendances spécifiées dans requirements.txt
          - name: Print Python version



      - name: Run tests with pytest
        run: |
          pytest  # Exécute les tests avec pytest, tu peux adapter cette ligne si tu utilises un autre framework de test

  deploy:
    needs: test  # Attente de la réussite des tests avant de passer à l'étape de déploiement
    runs-on: ubuntu-latest  # Utilisation de la dernière version d'Ubuntu pour l'exécution

    steps:
      - uses: actions/checkout@v4  # Récupère le code source depuis le repository GitHub
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3  # Connexion à Docker Hub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Récupère le nom d'utilisateur Docker Hub depuis les secrets GitHub
          password: ${{ secrets.DOCKERHUB_TOKEN }}  # Récupère le token Docker Hub depuis les secrets GitHub
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5  # Action Docker pour la construction et la poussée de l'image
        with:
          context: .  # Contexte du build (répertoire courant)
          push: true  # Pousse l'image vers Docker Hub
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/mon-app:latest  # Tag 'latest' pour la dernière version
            ${{ secrets.DOCKERHUB_USERNAME }}/mon-app:${{ github.sha }}  # Tag basé sur le hash du commit actuel
